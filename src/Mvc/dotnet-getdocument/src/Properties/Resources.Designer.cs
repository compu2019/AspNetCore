// <auto-generated />
namespace Microsoft.Extensions.ApiDescription.Tool
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Extensions.ApiDescription.Tool.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// dotnet-getdocument
        /// </summary>
        internal static string CommandFullName
        {
            get => GetString("CommandFullName");
        }

        /// <summary>
        /// dotnet-getdocument
        /// </summary>
        internal static string FormatCommandFullName()
            => GetString("CommandFullName");

        /// <summary>
        /// The target framework to use. Required.
        /// </summary>
        internal static string TargetFrameworkDescription
        {
            get => GetString("TargetFrameworkDescription");
        }

        /// <summary>
        /// The target framework to use. Required.
        /// </summary>
        internal static string FormatTargetFrameworkDescription()
            => GetString("TargetFrameworkDescription");

        /// <summary>
        /// Project '{0}' targets framework '.NETCoreApp' version '{1}'. This version of the dotnet-getdocument tool only supports version 2.1 or higher.
        /// </summary>
        internal static string OldNETCoreAppProject
        {
            get => GetString("OldNETCoreAppProject");
        }

        /// <summary>
        /// Project '{0}' targets framework '.NETCoreApp' version '{1}'. This version of the dotnet-getdocument tool only supports version 2.1 or higher.
        /// </summary>
        internal static string FormatOldNETCoreAppProject(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("OldNETCoreAppProject"), p0, p1);

        /// <summary>
        /// Project '{0}' targets framework '.NETStandard'. There is no runtime associated with this framework and projects targeting it cannot be executed directly. To use the dotnet-getdocument tool with this project, update this project to target .NET Core and / or .NET Framework.
        /// </summary>
        internal static string NETStandardProject
        {
            get => GetString("NETStandardProject");
        }

        /// <summary>
        /// Project '{0}' targets framework '.NETStandard'. There is no runtime associated with this framework and projects targeting it cannot be executed directly. To use the dotnet-getdocument tool with this project, update this project to target .NET Core and / or .NET Framework.
        /// </summary>
        internal static string FormatNETStandardProject(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("NETStandardProject"), p0);

        /// <summary>
        /// Do not colorize console output.
        /// </summary>
        internal static string NoColorDescription
        {
            get => GetString("NoColorDescription");
        }

        /// <summary>
        /// Do not colorize console output.
        /// </summary>
        internal static string FormatNoColorDescription()
            => GetString("NoColorDescription");

        /// <summary>
        /// Prefix console output with logging level.
        /// </summary>
        internal static string PrefixDescription
        {
            get => GetString("PrefixDescription");
        }

        /// <summary>
        /// Prefix console output with logging level.
        /// </summary>
        internal static string FormatPrefixDescription()
            => GetString("PrefixDescription");

        /// <summary>
        /// The project name. Required.
        /// </summary>
        internal static string ProjectDescription
        {
            get => GetString("ProjectDescription");
        }

        /// <summary>
        /// The project name. Required.
        /// </summary>
        internal static string FormatProjectDescription()
            => GetString("ProjectDescription");

        /// <summary>
        /// The runtime identifier to use.
        /// </summary>
        internal static string RuntimeDescription
        {
            get => GetString("RuntimeDescription");
        }

        /// <summary>
        /// The runtime identifier to use.
        /// </summary>
        internal static string FormatRuntimeDescription()
            => GetString("RuntimeDescription");

        /// <summary>
        /// Project '{0}' targets framework '{1}'. The dotnet-getdocument tool does not support this framework.
        /// </summary>
        internal static string UnsupportedFramework
        {
            get => GetString("UnsupportedFramework");
        }

        /// <summary>
        /// Project '{0}' targets framework '{1}'. The dotnet-getdocument tool does not support this framework.
        /// </summary>
        internal static string FormatUnsupportedFramework(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedFramework"), p0, p1);

        /// <summary>
        /// Show verbose output.
        /// </summary>
        internal static string VerboseDescription
        {
            get => GetString("VerboseDescription");
        }

        /// <summary>
        /// Show verbose output.
        /// </summary>
        internal static string FormatVerboseDescription()
            => GetString("VerboseDescription");

        /// <summary>
        /// The project assets file to use.
        /// </summary>
        internal static string AssetsFileDescription
        {
            get => GetString("AssetsFileDescription");
        }

        /// <summary>
        /// The project assets file to use.
        /// </summary>
        internal static string FormatAssetsFileDescription()
            => GetString("AssetsFileDescription");

        /// <summary>
        /// Missing required option '--{0}'.
        /// </summary>
        internal static string MissingOption
        {
            get => GetString("MissingOption");
        }

        /// <summary>
        /// Missing required option '--{0}'.
        /// </summary>
        internal static string FormatMissingOption(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("MissingOption"), p0);

        /// <summary>
        /// The platform to use.
        /// </summary>
        internal static string PlatformDescription
        {
            get => GetString("PlatformDescription");
        }

        /// <summary>
        /// The platform to use.
        /// </summary>
        internal static string FormatPlatformDescription()
            => GetString("PlatformDescription");

        /// <summary>
        /// The assembly path to use. Required.
        /// </summary>
        internal static string AssemblyDescription
        {
            get => GetString("AssemblyDescription");
        }

        /// <summary>
        /// The assembly path to use. Required.
        /// </summary>
        internal static string FormatAssemblyDescription()
            => GetString("AssemblyDescription");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
