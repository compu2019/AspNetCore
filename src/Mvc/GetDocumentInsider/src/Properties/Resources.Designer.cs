// <auto-generated />
namespace Microsoft.Extensions.ApiDescription.Tool
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Extensions.ApiDescription.Tool.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The assembly path to use. Required.
        /// </summary>
        internal static string AssemblyDescription
        {
            get => GetString("AssemblyDescription");
        }

        /// <summary>
        /// The assembly path to use. Required.
        /// </summary>
        internal static string FormatAssemblyDescription()
            => GetString("AssemblyDescription");

        /// <summary>
        /// Missing required option '--{0}'.
        /// </summary>
        internal static string MissingOption
        {
            get => GetString("MissingOption");
        }

        /// <summary>
        /// Missing required option '--{0}'.
        /// </summary>
        internal static string FormatMissingOption(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("MissingOption"), p0);

        /// <summary>
        /// Do not colorize console output.
        /// </summary>
        internal static string NoColorDescription
        {
            get => GetString("NoColorDescription");
        }

        /// <summary>
        /// Do not colorize console output.
        /// </summary>
        internal static string FormatNoColorDescription()
            => GetString("NoColorDescription");

        /// <summary>
        /// The directory where the document files should be written. Required.
        /// </summary>
        internal static string OutputDescription
        {
            get => GetString("OutputDescription");
        }

        /// <summary>
        /// The directory where the document files should be written. Required.
        /// </summary>
        internal static string FormatOutputDescription()
            => GetString("OutputDescription");

        /// <summary>
        /// Prefix console output with logging level.
        /// </summary>
        internal static string PrefixDescription
        {
            get => GetString("PrefixDescription");
        }

        /// <summary>
        /// Prefix console output with logging level.
        /// </summary>
        internal static string FormatPrefixDescription()
            => GetString("PrefixDescription");

        /// <summary>
        /// Show verbose console output.
        /// </summary>
        internal static string VerboseDescription
        {
            get => GetString("VerboseDescription");
        }

        /// <summary>
        /// Show verbose console output.
        /// </summary>
        internal static string FormatVerboseDescription()
            => GetString("VerboseDescription");

        /// <summary>
        /// Location from which inside man was copied (in the .NET Framework case) or loaded. Required.
        /// </summary>
        internal static string ToolsDirectoryDescription
        {
            get => GetString("ToolsDirectoryDescription");
        }

        /// <summary>
        /// Location from which inside man was copied (in the .NET Framework case) or loaded. Required.
        /// </summary>
        internal static string FormatToolsDirectoryDescription()
            => GetString("ToolsDirectoryDescription");

        /// <summary>
        /// Retrieving document named '{0}'.
        /// </summary>
        internal static string RetrievingDocument
        {
            get => GetString("RetrievingDocument");
        }

        /// <summary>
        /// Retrieving document named '{0}'.
        /// </summary>
        internal static string FormatRetrievingDocument(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("RetrievingDocument"), p0);

        /// <summary>
        /// Assembly '{0}' does not contain an entry point.
        /// </summary>
        internal static string MissingEntryPoint
        {
            get => GetString("MissingEntryPoint");
        }

        /// <summary>
        /// Assembly '{0}' does not contain an entry point.
        /// </summary>
        internal static string FormatMissingEntryPoint(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("MissingEntryPoint"), p0);

        /// <summary>
        /// Unable to find service type '{0}' in loaded assemblies.
        /// </summary>
        internal static string ServiceTypeNotFound
        {
            get => GetString("ServiceTypeNotFound");
        }

        /// <summary>
        /// Unable to find service type '{0}' in loaded assemblies.
        /// </summary>
        internal static string FormatServiceTypeNotFound(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("ServiceTypeNotFound"), p0);

        /// <summary>
        /// Method '{0}' not found in type '{1}' with expected signature.
        /// </summary>
        internal static string MethodNotFound
        {
            get => GetString("MethodNotFound");
        }

        /// <summary>
        /// Method '{0}' not found in type '{1}' with expected signature.
        /// </summary>
        internal static string FormatMethodNotFound(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodNotFound"), p0, p1);

        /// <summary>
        /// Unable to find service type '{0}' in dependency injection container.
        /// </summary>
        internal static string ServiceNotFound
        {
            get => GetString("ServiceNotFound");
        }

        /// <summary>
        /// Unable to find service type '{0}' in dependency injection container.
        /// </summary>
        internal static string FormatServiceNotFound(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("ServiceNotFound"), p0);

        /// <summary>
        /// Method '{0}' of type '{1}' returned null. Must return a non-null '{2}'.
        /// </summary>
        internal static string MethodReturnedNull
        {
            get => GetString("MethodReturnedNull");
        }

        /// <summary>
        /// Method '{0}' of type '{1}' returned null. Must return a non-null '{2}'.
        /// </summary>
        internal static string FormatMethodReturnedNull(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodReturnedNull"), p0, p1, p2);

        /// <summary>
        /// Method '{0}' of type '{1}' has unsupported return type '{2}'. Must return '{3}'.
        /// </summary>
        internal static string MethodReturnTypeUnsupported
        {
            get => GetString("MethodReturnTypeUnsupported");
        }

        /// <summary>
        /// Method '{0}' of type '{1}' has unsupported return type '{2}'. Must return '{3}'.
        /// </summary>
        internal static string FormatMethodReturnTypeUnsupported(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodReturnTypeUnsupported"), p0, p1, p2, p3);

        /// <summary>
        /// Method '{0}' of type '{1}' timed out. Must complete execution within {2} minute.
        /// </summary>
        internal static string MethodTimedOut
        {
            get => GetString("MethodTimedOut");
        }

        /// <summary>
        /// Method '{0}' of type '{1}' timed out. Must complete execution within {2} minute.
        /// </summary>
        internal static string FormatMethodTimedOut(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodTimedOut"), p0, p1, p2);

        /// <summary>
        /// Method '{0}' of type '{1}' is an instance method. Must be static.
        /// </summary>
        internal static string MethodIsNotStatic
        {
            get => GetString("MethodIsNotStatic");
        }

        /// <summary>
        /// Method '{0}' of type '{1}' is an instance method. Must be static.
        /// </summary>
        internal static string FormatMethodIsNotStatic(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodIsNotStatic"), p0, p1);

        /// <summary>
        /// Method '{0}' of type '{1}' is static. Must be an instance method.
        /// </summary>
        internal static string MethodIsStatic
        {
            get => GetString("MethodIsStatic");
        }

        /// <summary>
        /// Method '{0}' of type '{1}' is static. Must be an instance method.
        /// </summary>
        internal static string FormatMethodIsStatic(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodIsStatic"), p0, p1);

        /// <summary>
        /// Neither method '{0}' nor '{1}' found in type '{2}' with expected signatures.
        /// </summary>
        internal static string MethodsNotFound
        {
            get => GetString("MethodsNotFound");
        }

        /// <summary>
        /// Neither method '{0}' nor '{1}' found in type '{2}' with expected signatures.
        /// </summary>
        internal static string FormatMethodsNotFound(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodsNotFound"), p0, p1, p2);

        /// <summary>
        /// Writing document named '{0}' to '{1}'.
        /// </summary>
        internal static string WritingDocument
        {
            get => GetString("WritingDocument");
        }

        /// <summary>
        /// Writing document named '{0}' to '{1}'.
        /// </summary>
        internal static string FormatWritingDocument(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("WritingDocument"), p0, p1);

        /// <summary>
        /// Method '{0}' of type '{1}' wrote no content for document named '{2}'.
        /// </summary>
        internal static string MethodWroteNoContent
        {
            get => GetString("MethodWroteNoContent");
        }

        /// <summary>
        /// Method '{0}' of type '{1}' wrote no content for document named '{2}'.
        /// </summary>
        internal static string FormatMethodWroteNoContent(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("MethodWroteNoContent"), p0, p1, p2);

        /// <summary>
        /// GetDocument.Insider
        /// </summary>
        internal static string CommandFullName
        {
            get => GetString("CommandFullName");
        }

        /// <summary>
        /// GetDocument.Insider
        /// </summary>
        internal static string FormatCommandFullName()
            => GetString("CommandFullName");

        /// <summary>
        /// The path where the list of document files should be written. Required.
        /// </summary>
        internal static string FileListDescription
        {
            get => GetString("FileListDescription");
        }

        /// <summary>
        /// The path where the list of document files should be written. Required.
        /// </summary>
        internal static string FormatFileListDescription()
            => GetString("FileListDescription");

        /// <summary>
        /// The project name to use. Required.
        /// </summary>
        internal static string ProjectDescription
        {
            get => GetString("ProjectDescription");
        }

        /// <summary>
        /// The project name to use. Required.
        /// </summary>
        internal static string FormatProjectDescription()
            => GetString("ProjectDescription");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
